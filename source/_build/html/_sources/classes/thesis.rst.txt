Theses/Dissertations using LaTeX
--------------------------------

LaTeX is hands down the best tool to use when writing your thesis or
dissertation. Instead of arguing the point, let me make a simple
statement: Users of LaTeX know how to use MS Word, but use LaTeX
instead. Users of MS Word don't know how to use LaTeX. It's that simple. If your adviser won't let you use LaTeX, my condolences. Your document
will lack the polish of a professional typesetting system (Do you think
journals typeset using MS Word?), and you will be tortured by cross reference and citation issues and inconsistencies. You likely use MS Word
because that's all you've ever known. Hopefully you'll stopped crawling
(using MS Word) and now walk upright (use LaTeX). If you don't, c'est la
vie. (Your loss.) If you want to know a little about why to use LaTeX,
consult some of the references below.

Regardless of whether you use LaTeX, it's important that you know how
to properly archive your data. If you don't store your data in a
readable format, you might as well delete it after you defend. You've
made it useless. If you want to save is for potential future use, read
my document on `archiving your data <http://josephcslater.github.io/archiving-and-plotting-data.html>`__. It's not a
great document, but it's the best I've got.

Plotting (even if you're not using LaTeX)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You're likely going to make plots. Lots of plots. Then, you are going to realize you have to make changes. Lots of changes. One of the problems with using non-referencing software for your document (one that doesn't embed graphics by reference) is that after fixing your graphics, you still have to go back into your document to re-embed them. Five or six is a bit bothersome, but often it's even more. If you can reference the graphic file, then updating the file is all you have to do to fix your document.

With that: how do you update the graphic? Well, if it's a drawing, most people will use some sort of drawing package. `InkScape`_ is powerful, and has a good price (free). Once can actually code up graphics, and they look fantastic. However, this is a bit beyond what most will find worthwhile. I do when appropriate, and I don't when it doesn't matter. It's a subjective call.

Regardless, here we are talking about plotting data in all of it's various forms. If you followed the instructions of `Creating Good Graphics and Archiving Your Data <http://josephcslater.github.io/archiving-and-plotting-data.html>`__
the section on plotting implores you to create a script file for your plotting. Why? Well, you most likely had to issue the commands to make your plots (unless you used Excel- which really isn't as easy as advertised). Just by:

1. Putting the data to be plotted in a file (saving it per `Creating Good Graphics and Archiving Your Data`_)
2. Putting your commands to plot the graphics in a script file (I love using `Jupyter Notebooks`_, but see `Using Jupyter Notebooks`_)
3. Adding the appropriate *save* commands, for your language, to save in *vector format*. Using a vector format such as PDF or SVG is almost always the best choice as it preserves the structure of the information behind the plot, while `raster formats`_ destroy this information. The "p" in *jpeg* means *photo*. It's best for actual pictures with the richness of variations that exist in the real world. Plot are more often than not created on a solid white background. Only a single color. jpeg can't do solid colors well at all and will smudge the interfaces between the foreground plots and axes and the background, while also taking more space and making small fonts unintelligible.

Making quality plots can be a challenge. Most graphics generated by authors don't
have fonts and/or font sizes that match the text, or they are all fuzzy,
etc. One of the best classic packages for generating publication-quality (print-quality) graphs
is `gnuplot <http://www.gnuplot.info/>`__. It allows you to specify the
size of the resulting graphic (so you don't have to "squeeze it") in
your final document, the font, the font size, tic marks, etc. You can
plot functions, as well as data, plus curve fit to it while plotting. It
can be a little bit challenging at first, so a good place to start is
with a tutorial such at `the one at Harvey Mudd
College <http://www.cs.hmc.edu/~vrable/gnuplot/using-gnuplot.html>`__
and `the one at Duke <http://www.duke.edu/~hpgavin/gnuplot.html>`__.
Yes, you may think you can do this as well in Excel, but the reality is
the cartoony plots in Excel look good in brochures and business
presentations, not engineering, math and science technical papers.

- Do not include file extensions when including files. LaTeX can choose the best you have, or switch from eps to pdf etc.

- Use vector graphics at every instance possible (anything that is not
  a photograph). At the very least, save a version in vector form for your adviser. See `archiving your data`_. It tells you how to save the data as well.

WSU LaTeX Thesis/Dissertation style file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The remainder of this document and the related supporting files have
been moved to the `WSUThesisTemplate <https://github.com/josephcslater/WSUThesisTemplate>`__ github repository.


Using Jupyter Notebooks
~~~~~~~~~~~~~~~~~~~~~~~~~~

A `Jupyter Notebook`_ is the easiest way to:

1. Fiddle with your plots and get them "just right"
2. Put them all in one place
3. Ensure that your settings are consistent, and
4. Make a slew of corrections and easily regenerate all of your plots.

Even if you use Matlab, `matplotlib pyplot`_ (which has a syntax not too far from that of Matlab) can be the easiest way to make plots simply because of the book-keeping and note-taking ability of `Jupyter Notebooks`_ as `SciPy`_ makes loading *.mat* files easy. You can `try Jupyter Notebooks`_ online.

.. _`try Jupyter Notebooks`: https://mybinder.org/v2/gh/ipython/ipython-in-depth/master?filepath=binder/Index.ipynb
.. _`SciPy`: http://www.scipy.org
.. _`Jupyter Notebook`: http://jupyter.org
.. _`Jupyter Notebooks`: http://jupyter.org
.. _`Creating Good Graphics and Archiving Your Data`: http://josephcslater.github.io/archiving-and-plotting-data.html
.. _`matplotlib pyplot`: https://matplotlib.org/
.. _`raster formats`: http://b.nanes.org/figures/
.. _archiving your data: http://josephcslater.github.io/archiving-and-plotting-data.html
.. _`InkScape`: http://www.inkscape.org
